// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_INCLUDED_Message_2eproto
#define PROTOBUF_INCLUDED_Message_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MsgId.pb.h"
#include "Goal.pb.h"
#include "Turn.pb.h"
#include "Direction.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Message_2eproto 

namespace protobuf_Message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Message_2eproto
namespace PaperSoccer {
class EndTurnMsg;
class EndTurnMsgDefaultTypeInternal;
extern EndTurnMsgDefaultTypeInternal _EndTurnMsg_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MoveMsg;
class MoveMsgDefaultTypeInternal;
extern MoveMsgDefaultTypeInternal _MoveMsg_default_instance_;
class NewGameMsg;
class NewGameMsgDefaultTypeInternal;
extern NewGameMsgDefaultTypeInternal _NewGameMsg_default_instance_;
class ReadyForNewGameMsg;
class ReadyForNewGameMsgDefaultTypeInternal;
extern ReadyForNewGameMsgDefaultTypeInternal _ReadyForNewGameMsg_default_instance_;
class TimeoutMsg;
class TimeoutMsgDefaultTypeInternal;
extern TimeoutMsgDefaultTypeInternal _TimeoutMsg_default_instance_;
class UndoMoveMsg;
class UndoMoveMsgDefaultTypeInternal;
extern UndoMoveMsgDefaultTypeInternal _UndoMoveMsg_default_instance_;
}  // namespace PaperSoccer
namespace google {
namespace protobuf {
template<> ::PaperSoccer::EndTurnMsg* Arena::CreateMaybeMessage<::PaperSoccer::EndTurnMsg>(Arena*);
template<> ::PaperSoccer::Message* Arena::CreateMaybeMessage<::PaperSoccer::Message>(Arena*);
template<> ::PaperSoccer::MoveMsg* Arena::CreateMaybeMessage<::PaperSoccer::MoveMsg>(Arena*);
template<> ::PaperSoccer::NewGameMsg* Arena::CreateMaybeMessage<::PaperSoccer::NewGameMsg>(Arena*);
template<> ::PaperSoccer::ReadyForNewGameMsg* Arena::CreateMaybeMessage<::PaperSoccer::ReadyForNewGameMsg>(Arena*);
template<> ::PaperSoccer::TimeoutMsg* Arena::CreateMaybeMessage<::PaperSoccer::TimeoutMsg>(Arena*);
template<> ::PaperSoccer::UndoMoveMsg* Arena::CreateMaybeMessage<::PaperSoccer::UndoMoveMsg>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PaperSoccer {

// ===================================================================

class NewGameMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PaperSoccer.NewGameMsg) */ {
 public:
  NewGameMsg();
  virtual ~NewGameMsg();

  NewGameMsg(const NewGameMsg& from);

  inline NewGameMsg& operator=(const NewGameMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewGameMsg(NewGameMsg&& from) noexcept
    : NewGameMsg() {
    *this = ::std::move(from);
  }

  inline NewGameMsg& operator=(NewGameMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewGameMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewGameMsg* internal_default_instance() {
    return reinterpret_cast<const NewGameMsg*>(
               &_NewGameMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NewGameMsg* other);
  friend void swap(NewGameMsg& a, NewGameMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewGameMsg* New() const final {
    return CreateMaybeMessage<NewGameMsg>(NULL);
  }

  NewGameMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewGameMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewGameMsg& from);
  void MergeFrom(const NewGameMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewGameMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .PaperSoccer.Turn turn = 1;
  void clear_turn();
  static const int kTurnFieldNumber = 1;
  ::PaperSoccer::Turn turn() const;
  void set_turn(::PaperSoccer::Turn value);

  // .PaperSoccer.Goal goal = 2;
  void clear_goal();
  static const int kGoalFieldNumber = 2;
  ::PaperSoccer::Goal goal() const;
  void set_goal(::PaperSoccer::Goal value);

  // @@protoc_insertion_point(class_scope:PaperSoccer.NewGameMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int turn_;
  int goal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PaperSoccer.MoveMsg) */ {
 public:
  MoveMsg();
  virtual ~MoveMsg();

  MoveMsg(const MoveMsg& from);

  inline MoveMsg& operator=(const MoveMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveMsg(MoveMsg&& from) noexcept
    : MoveMsg() {
    *this = ::std::move(from);
  }

  inline MoveMsg& operator=(MoveMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveMsg* internal_default_instance() {
    return reinterpret_cast<const MoveMsg*>(
               &_MoveMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MoveMsg* other);
  friend void swap(MoveMsg& a, MoveMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveMsg* New() const final {
    return CreateMaybeMessage<MoveMsg>(NULL);
  }

  MoveMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveMsg& from);
  void MergeFrom(const MoveMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .PaperSoccer.Direction dir = 1;
  void clear_dir();
  static const int kDirFieldNumber = 1;
  ::PaperSoccer::Direction dir() const;
  void set_dir(::PaperSoccer::Direction value);

  // @@protoc_insertion_point(class_scope:PaperSoccer.MoveMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int dir_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UndoMoveMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PaperSoccer.UndoMoveMsg) */ {
 public:
  UndoMoveMsg();
  virtual ~UndoMoveMsg();

  UndoMoveMsg(const UndoMoveMsg& from);

  inline UndoMoveMsg& operator=(const UndoMoveMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UndoMoveMsg(UndoMoveMsg&& from) noexcept
    : UndoMoveMsg() {
    *this = ::std::move(from);
  }

  inline UndoMoveMsg& operator=(UndoMoveMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UndoMoveMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UndoMoveMsg* internal_default_instance() {
    return reinterpret_cast<const UndoMoveMsg*>(
               &_UndoMoveMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UndoMoveMsg* other);
  friend void swap(UndoMoveMsg& a, UndoMoveMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UndoMoveMsg* New() const final {
    return CreateMaybeMessage<UndoMoveMsg>(NULL);
  }

  UndoMoveMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UndoMoveMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UndoMoveMsg& from);
  void MergeFrom(const UndoMoveMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoMoveMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PaperSoccer.UndoMoveMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EndTurnMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PaperSoccer.EndTurnMsg) */ {
 public:
  EndTurnMsg();
  virtual ~EndTurnMsg();

  EndTurnMsg(const EndTurnMsg& from);

  inline EndTurnMsg& operator=(const EndTurnMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndTurnMsg(EndTurnMsg&& from) noexcept
    : EndTurnMsg() {
    *this = ::std::move(from);
  }

  inline EndTurnMsg& operator=(EndTurnMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EndTurnMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndTurnMsg* internal_default_instance() {
    return reinterpret_cast<const EndTurnMsg*>(
               &_EndTurnMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EndTurnMsg* other);
  friend void swap(EndTurnMsg& a, EndTurnMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndTurnMsg* New() const final {
    return CreateMaybeMessage<EndTurnMsg>(NULL);
  }

  EndTurnMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EndTurnMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EndTurnMsg& from);
  void MergeFrom(const EndTurnMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndTurnMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timeLeft = 1;
  void clear_timeleft();
  static const int kTimeLeftFieldNumber = 1;
  ::google::protobuf::int64 timeleft() const;
  void set_timeleft(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PaperSoccer.EndTurnMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timeleft_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadyForNewGameMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PaperSoccer.ReadyForNewGameMsg) */ {
 public:
  ReadyForNewGameMsg();
  virtual ~ReadyForNewGameMsg();

  ReadyForNewGameMsg(const ReadyForNewGameMsg& from);

  inline ReadyForNewGameMsg& operator=(const ReadyForNewGameMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadyForNewGameMsg(ReadyForNewGameMsg&& from) noexcept
    : ReadyForNewGameMsg() {
    *this = ::std::move(from);
  }

  inline ReadyForNewGameMsg& operator=(ReadyForNewGameMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadyForNewGameMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadyForNewGameMsg* internal_default_instance() {
    return reinterpret_cast<const ReadyForNewGameMsg*>(
               &_ReadyForNewGameMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReadyForNewGameMsg* other);
  friend void swap(ReadyForNewGameMsg& a, ReadyForNewGameMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadyForNewGameMsg* New() const final {
    return CreateMaybeMessage<ReadyForNewGameMsg>(NULL);
  }

  ReadyForNewGameMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadyForNewGameMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadyForNewGameMsg& from);
  void MergeFrom(const ReadyForNewGameMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadyForNewGameMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PaperSoccer.ReadyForNewGameMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeoutMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PaperSoccer.TimeoutMsg) */ {
 public:
  TimeoutMsg();
  virtual ~TimeoutMsg();

  TimeoutMsg(const TimeoutMsg& from);

  inline TimeoutMsg& operator=(const TimeoutMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeoutMsg(TimeoutMsg&& from) noexcept
    : TimeoutMsg() {
    *this = ::std::move(from);
  }

  inline TimeoutMsg& operator=(TimeoutMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeoutMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeoutMsg* internal_default_instance() {
    return reinterpret_cast<const TimeoutMsg*>(
               &_TimeoutMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TimeoutMsg* other);
  friend void swap(TimeoutMsg& a, TimeoutMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeoutMsg* New() const final {
    return CreateMaybeMessage<TimeoutMsg>(NULL);
  }

  TimeoutMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimeoutMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimeoutMsg& from);
  void MergeFrom(const TimeoutMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeoutMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PaperSoccer.TimeoutMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PaperSoccer.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  private:
  const ::google::protobuf::Any& _internal_message() const;
  public:
  const ::google::protobuf::Any& message() const;
  ::google::protobuf::Any* release_message();
  ::google::protobuf::Any* mutable_message();
  void set_allocated_message(::google::protobuf::Any* message);

  // .PaperSoccer.MsgId msgId = 1;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::PaperSoccer::MsgId msgid() const;
  void set_msgid(::PaperSoccer::MsgId value);

  // @@protoc_insertion_point(class_scope:PaperSoccer.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* message_;
  int msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewGameMsg

// .PaperSoccer.Turn turn = 1;
inline void NewGameMsg::clear_turn() {
  turn_ = 0;
}
inline ::PaperSoccer::Turn NewGameMsg::turn() const {
  // @@protoc_insertion_point(field_get:PaperSoccer.NewGameMsg.turn)
  return static_cast< ::PaperSoccer::Turn >(turn_);
}
inline void NewGameMsg::set_turn(::PaperSoccer::Turn value) {
  
  turn_ = value;
  // @@protoc_insertion_point(field_set:PaperSoccer.NewGameMsg.turn)
}

// .PaperSoccer.Goal goal = 2;
inline void NewGameMsg::clear_goal() {
  goal_ = 0;
}
inline ::PaperSoccer::Goal NewGameMsg::goal() const {
  // @@protoc_insertion_point(field_get:PaperSoccer.NewGameMsg.goal)
  return static_cast< ::PaperSoccer::Goal >(goal_);
}
inline void NewGameMsg::set_goal(::PaperSoccer::Goal value) {
  
  goal_ = value;
  // @@protoc_insertion_point(field_set:PaperSoccer.NewGameMsg.goal)
}

// -------------------------------------------------------------------

// MoveMsg

// .PaperSoccer.Direction dir = 1;
inline void MoveMsg::clear_dir() {
  dir_ = 0;
}
inline ::PaperSoccer::Direction MoveMsg::dir() const {
  // @@protoc_insertion_point(field_get:PaperSoccer.MoveMsg.dir)
  return static_cast< ::PaperSoccer::Direction >(dir_);
}
inline void MoveMsg::set_dir(::PaperSoccer::Direction value) {
  
  dir_ = value;
  // @@protoc_insertion_point(field_set:PaperSoccer.MoveMsg.dir)
}

// -------------------------------------------------------------------

// UndoMoveMsg

// -------------------------------------------------------------------

// EndTurnMsg

// int64 timeLeft = 1;
inline void EndTurnMsg::clear_timeleft() {
  timeleft_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EndTurnMsg::timeleft() const {
  // @@protoc_insertion_point(field_get:PaperSoccer.EndTurnMsg.timeLeft)
  return timeleft_;
}
inline void EndTurnMsg::set_timeleft(::google::protobuf::int64 value) {
  
  timeleft_ = value;
  // @@protoc_insertion_point(field_set:PaperSoccer.EndTurnMsg.timeLeft)
}

// -------------------------------------------------------------------

// ReadyForNewGameMsg

// -------------------------------------------------------------------

// TimeoutMsg

// -------------------------------------------------------------------

// Message

// .PaperSoccer.MsgId msgId = 1;
inline void Message::clear_msgid() {
  msgid_ = 0;
}
inline ::PaperSoccer::MsgId Message::msgid() const {
  // @@protoc_insertion_point(field_get:PaperSoccer.Message.msgId)
  return static_cast< ::PaperSoccer::MsgId >(msgid_);
}
inline void Message::set_msgid(::PaperSoccer::MsgId value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:PaperSoccer.Message.msgId)
}

// .google.protobuf.Any message = 2;
inline bool Message::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::google::protobuf::Any& Message::_internal_message() const {
  return *message_;
}
inline const ::google::protobuf::Any& Message::message() const {
  const ::google::protobuf::Any* p = message_;
  // @@protoc_insertion_point(field_get:PaperSoccer.Message.message)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Message::release_message() {
  // @@protoc_insertion_point(field_release:PaperSoccer.Message.message)
  
  ::google::protobuf::Any* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Message::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PaperSoccer.Message.message)
  return message_;
}
inline void Message::set_allocated_message(::google::protobuf::Any* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:PaperSoccer.Message.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PaperSoccer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Message_2eproto
